// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UniSearch.Data;

#nullable disable

namespace UniSearch.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250310024910_tables_and_joins_created")]
    partial class tables_and_joins_created
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("UniSearch.Models.ApiPermissions", b =>
                {
                    b.Property<Guid>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApiURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PermissionId");

                    b.ToTable("ApiPermissions");
                });

            modelBuilder.Entity("UniSearch.Models.BranchDetail", b =>
                {
                    b.Property<Guid>("BranchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BranchCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BranchName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BranchType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("InputBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("InputDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InputIP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ModifyBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifyIP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("BranchId");

                    b.HasIndex("InputBy");

                    b.HasIndex("ModifyBy");

                    b.ToTable("BranchDetail");
                });

            modelBuilder.Entity("UniSearch.Models.COUNTRIES", b =>
                {
                    b.Property<Guid>("COUNTRY_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("COUNTRY_NAME")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IS_ACTIVE")
                        .HasColumnType("bit");

                    b.HasKey("COUNTRY_ID");

                    b.ToTable("COUNTRIES");
                });

            modelBuilder.Entity("UniSearch.Models.COURSES", b =>
                {
                    b.Property<Guid>("COURSE_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("APPLICATION_DEADLINE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("COURSE_NAME")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("COURSE_TYPE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IELTS_SCORE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IS_ACTIVE")
                        .HasColumnType("bit");

                    b.Property<string>("LANGUAGE_ID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LINKS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SEMESTERS")
                        .HasColumnType("int");

                    b.Property<string>("SEMESTER_START")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UNIVERSITY_ID")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("COURSE_ID");

                    b.ToTable("COURSES");
                });

            modelBuilder.Entity("UniSearch.Models.LANGUAGES", b =>
                {
                    b.Property<Guid>("LANGUAGE_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IS_ACTIVE")
                        .HasColumnType("bit");

                    b.Property<string>("LANGUAGE")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LANGUAGE_ID");

                    b.ToTable("LANGUAGES");
                });

            modelBuilder.Entity("UniSearch.Models.LOGS", b =>
                {
                    b.Property<Guid>("LOGD_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ACTION")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("API_REQUESTDATA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("API_RESPONSEDATA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("INPUT_BROWSER")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("INPUT_BRO_VERSION")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("INPUT_BY")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("INPUT_DATE")
                        .HasColumnType("datetime2");

                    b.Property<string>("INPUT_IP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("INPUT_MAC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IS_CLIENT_API")
                        .HasColumnType("bit");

                    b.Property<string>("STATUS_CODE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TYPE_ID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("URL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LOGD_ID");

                    b.ToTable("LOGS");
                });

            modelBuilder.Entity("UniSearch.Models.UNIVERSITIES", b =>
                {
                    b.Property<Guid>("UNIVERSITY_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CITY")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("COUNTRY_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IS_ACTIVE")
                        .HasColumnType("bit");

                    b.Property<string>("UNIVERSITY_NAME")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UNIVERSITY_TYPE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UNIVERSITY_iMAGE")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UNIVERSITY_ID");

                    b.HasIndex("COUNTRY_ID");

                    b.ToTable("UNIVERSITIES");
                });

            modelBuilder.Entity("UniSearch.Models.UserLogin", b =>
                {
                    b.Property<Guid>("LoginId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LoginId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserLogin");
                });

            modelBuilder.Entity("UniSearch.Models.UserRole", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UniSearch.Models.BranchDetail", b =>
                {
                    b.HasOne("UniSearch.Models.UserLogin", "UserLoginInpBy")
                        .WithMany("branchDetailInpBy")
                        .HasForeignKey("InputBy");

                    b.HasOne("UniSearch.Models.UserLogin", "UserLoginModiBy")
                        .WithMany("branchDetailModiBy")
                        .HasForeignKey("ModifyBy");

                    b.Navigation("UserLoginInpBy");

                    b.Navigation("UserLoginModiBy");
                });

            modelBuilder.Entity("UniSearch.Models.UNIVERSITIES", b =>
                {
                    b.HasOne("UniSearch.Models.COUNTRIES", "COUNTRIES")
                        .WithMany("UNIVERSITIES")
                        .HasForeignKey("COUNTRY_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("COUNTRIES");
                });

            modelBuilder.Entity("UniSearch.Models.UserLogin", b =>
                {
                    b.HasOne("UniSearch.Models.UserRole", "UserRole")
                        .WithMany("userLogins")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("UniSearch.Models.COUNTRIES", b =>
                {
                    b.Navigation("UNIVERSITIES");
                });

            modelBuilder.Entity("UniSearch.Models.UserLogin", b =>
                {
                    b.Navigation("branchDetailInpBy");

                    b.Navigation("branchDetailModiBy");
                });

            modelBuilder.Entity("UniSearch.Models.UserRole", b =>
                {
                    b.Navigation("userLogins");
                });
#pragma warning restore 612, 618
        }
    }
}
